name: Build x86_64 + aarch64 Wheels

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - "main"
  pull_request:
    branches:
      - "develop"
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheel on ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x86_64
            enable_cuda: "ON"
          - os: ubuntu-22.04-arm
            arch: aarch64
            enable_cuda: "OFF"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install CUDA Toolkit (only on x86_64)
      - name: Install CUDA Toolkit
        if: matrix.enable_cuda == 'ON'
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_version }}
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'
          log-file-suffix: '${{matrix.os}}-${{matrix.arch}}.txt'

      - name: Verify CUDA installation
        if: matrix.enable_cuda == 'ON'
        run: |
          echo "CUDA Path: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          echo "CUDA Version: ${{steps.cuda-toolkit.outputs.cuda}}"
          nvcc --version
          export PATH=${{steps.cuda-toolkit.outputs.CUDA_PATH}}/bin:$PATH
          export LD_LIBRARY_PATH=${{steps.cuda-toolkit.outputs.CUDA_PATH}}/lib64:$LD_LIBRARY_PATH

      - name: Install Python and cibuildwheel
        run: |
          python3 -m pip install --upgrade pip
          pip install cibuildwheel==2.16.5

      - name: Show architecture info
        run: |
          echo "uname -m: $(uname -m)"
          echo "arch: $(arch)"
          lscpu | grep Architecture

      - name: Build wheels
        env:
          # System dependencies
          CIBW_BEFORE_ALL_LINUX: bash .github/scripts/install_sys_deps.sh
          CIBW_BEFORE_BUILD_LINUX: bash .github/scripts/install_build_deps.sh

          # Build configuration
          CIBW_PLATFORM: linux
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_SKIP: "*-musllinux*"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          
          # Enhanced bindings + CUDA configuration
          CIBW_ENVIRONMENT: >
            BUILD_ENHANCED_BINDINGS=ON
            ENABLE_CUDA=${{ matrix.enable_cuda }}
            CUDA_HOME=${{ steps.cuda-toolkit.outputs.CUDA_PATH || '/usr/local/cuda' }}
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCUDA_TOOLKIT_ROOT_DIR=${{ steps.cuda-toolkit.outputs.CUDA_PATH || '/usr/local/cuda' }}"
            Pangolin_DIR=/usr/local/pangolin/lib/cmake/Pangolin
            PATH=${{ steps.cuda-toolkit.outputs.CUDA_PATH || '/usr/local/cuda' }}/bin:$PATH
            LD_LIBRARY_PATH=${{ steps.cuda-toolkit.outputs.CUDA_PATH || '/usr/local/cuda' }}/lib64:$LD_LIBRARY_PATH
          
          # Repair wheel command to exclude certain shared libraries
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}
            --exclude libGL.so.1
            --exclude libGLX.so.0
            --exclude libGLU.so.1
            --exclude libEGL.so.1
            --exclude libOpenGL.so.0
            --exclude libGLdispatch.so.0
            --exclude libcuda.so.1
            --exclude libcudart.so.12
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheelhouse-${{ matrix.arch }}-cuda${{ matrix.enable_cuda }}
          path: wheelhouse/*.whl

  publish_to_pypi:
    name: "Publish to PyPI"
    needs: build-wheels
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/project/orbslam3_python
    steps:
      - name: "Download PyPI wheels"
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Flatten dist structure
        run: |
          mkdir -p final_dist
          find dist/ -name "*.whl" -exec cp {} final_dist/ \;
          ls -lh final_dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: final_dist/